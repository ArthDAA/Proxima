import React, { useState } from "react";
import { Conversation } from "@/entities/all";
import { User } from "@/entities/User";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Users, ArrowRight, Copy, Check } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function CreateMediationPage() {
  const navigate = useNavigate();
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    title: "",
    subject: "",
    participants: "",
    description: ""
  });
  const [mediationCode, setMediationCode] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [copied, setCopied] = useState(false);

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  const generateCode = () => {
    return Math.random().toString(36).substr(2, 8).toUpperCase();
  };

  const createMediation = async () => {
    if (!formData.title || !formData.subject) return;
    
    setIsLoading(true);
    
    try {
      const user = await User.me();
      const code = generateCode();
      
      const participantEmails = formData.participants
        .split(',')
        .map(email => email.trim())
        .filter(email => email);
      
      const mediation = await Conversation.create({
        type: "group_mediation",
        title: formData.title,
        subject: formData.subject,
        mediation_code: code,
        participants: [user.email, ...participantEmails],
        status: "waiting_participants"
      });

      setMediationCode(code);
      setStep(2);
    } catch (error) {
      console.error("Erreur cr√©ation m√©diation:", error);
    }
    
    setIsLoading(false);
  };

  const copyCode = () => {
    navigator.clipboard.writeText(mediationCode);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const goToMediation = () => {
    navigate(createPageUrl("Mediations"));
  };

  if (step === 2) {
    return (
      <div className="min-h-screen p-6" style={{ backgroundColor: 'var(--background)' }}>
        <div className="max-w-2xl mx-auto">
          <Card className="border-2" style={{ borderColor: 'var(--primary)' }}>
            <CardHeader className="text-center">
              <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-green-100 flex items-center justify-center">
                <Check className="w-8 h-8 text-green-600" />
              </div>
              <CardTitle className="text-2xl" style={{ color: 'var(--foreground)' }}>
                M√©diation cr√©√©e !
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="text-center">
                <p className="mb-4" style={{ color: 'var(--muted-foreground)' }}>
                  Partagez ce code avec les autres participants :
                </p>
                <div className="flex items-center justify-center gap-2">
                  <div className="px-6 py-3 rounded-lg text-2xl font-bold tracking-wider"
                       style={{ 
                         backgroundColor: 'var(--accent)', 
                         color: 'var(--foreground)' 
                       }}>
                    {mediationCode}
                  </div>
                  <Button
                    variant="outline"
                    size="icon"
                    onClick={copyCode}
                    disabled={copied}
                  >
                    {copied ? <Check className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                  </Button>
                </div>
              </div>

              <div className="space-y-3">
                <h3 className="font-semibold" style={{ color: 'var(--foreground)' }}>
                  Comment √ßa marche maintenant ?
                </h3>
                <div className="space-y-2 text-sm" style={{ color: 'var(--muted-foreground)' }}>
                  <p>1. Chaque participant rejoint avec ce code</p>
                  <p>2. Vous exprimez chacun votre version des faits en priv√©</p>
                  <p>3. Je propose une analyse neutre et des solutions</p>
                  <p>4. Vous discutez ensemble avec mon aide</p>
                </div>
              </div>

              <div className="flex gap-3">
                <Button
                  variant="outline"
                  onClick={() => setStep(1)}
                  className="flex-1"
                >
                  Cr√©er une autre m√©diation
                </Button>
                <Button
                  onClick={goToMediation}
                  className="flex-1"
                  style={{
                    backgroundColor: 'var(--primary)',
                    color: 'var(--primary-foreground)'
                  }}
                >
                  Voir mes m√©diations
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen p-6" style={{ backgroundColor: 'var(--background)' }}>
      <div className="max-w-2xl mx-auto">
        <div className="text-center mb-8">
          <div className="w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center"
               style={{ background: 'linear-gradient(135deg, var(--primary), #A68B5B)' }}>
            <Users className="w-8 h-8" style={{ color: 'var(--primary-foreground)' }} />
          </div>
          <h1 className="text-3xl font-bold mb-2" style={{ color: 'var(--foreground)' }}>
            Cr√©er une m√©diation
          </h1>
          <p className="text-lg" style={{ color: 'var(--muted-foreground)' }}>
            R√©solvons ce conflit ensemble, avec bienveillance et neutralit√©.
          </p>
        </div>

        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Users className="w-5 h-5" style={{ color: 'var(--primary)' }} />
              D√©crivez la situation
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-6">
            <div className="space-y-2">
              <Label htmlFor="title">Titre de la m√©diation</Label>
              <Input
                id="title"
                placeholder="Ex: Conflit avec mon colocataire"
                value={formData.title}
                onChange={(e) => handleInputChange("title", e.target.value)}
                style={{
                  borderColor: 'var(--border)',
                  backgroundColor: 'var(--background)'
                }}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="subject">Sujet du conflit</Label>
              <Input
                id="subject"
                placeholder="Ex: R√©partition des t√¢ches m√©nag√®res"
                value={formData.subject}
                onChange={(e) => handleInputChange("subject", e.target.value)}
                style={{
                  borderColor: 'var(--border)',
                  backgroundColor: 'var(--background)'
                }}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="participants">Emails des autres participants (optionnel)</Label>
              <Input
                id="participants"
                placeholder="marie@email.com, paul@email.com"
                value={formData.participants}
                onChange={(e) => handleInputChange("participants", e.target.value)}
                style={{
                  borderColor: 'var(--border)',
                  backgroundColor: 'var(--background)'
                }}
              />
              <p className="text-xs" style={{ color: 'var(--muted-foreground)' }}>
                S√©parez les emails par des virgules. Vous pourrez aussi partager le code plus tard.
              </p>
            </div>

            <div className="space-y-2">
              <Label htmlFor="description">Description rapide (optionnel)</Label>
              <Textarea
                id="description"
                placeholder="Contexte ou d√©tails importants..."
                value={formData.description}
                onChange={(e) => handleInputChange("description", e.target.value)}
                rows={3}
                style={{
                  borderColor: 'var(--border)',
                  backgroundColor: 'var(--background)'
                }}
              />
            </div>

            <Button
              onClick={createMediation}
              disabled={isLoading || !formData.title || !formData.subject}
              className="w-full"
              style={{
                backgroundColor: 'var(--primary)',
                color: 'var(--primary-foreground)'
              }}
            >
              {isLoading ? (
                "Cr√©ation en cours..."
              ) : (
                <>
                  Cr√©er la m√©diation
                  <ArrowRight className="w-4 h-4 ml-2" />
                </>
              )}
            </Button>
          </CardContent>
        </Card>

        <Card className="mt-6" style={{ backgroundColor: 'var(--muted)' }}>
          <CardContent className="p-4">
            <h3 className="font-semibold mb-2" style={{ color: 'var(--foreground)' }}>
              üí° Comment √ßa va se passer ?
            </h3>
            <ol className="text-sm space-y-1" style={{ color: 'var(--muted-foreground)' }}>
              <li>1. Chaque participant s'exprime en priv√© avec moi</li>
              <li>2. J'analyse la situation de mani√®re neutre</li>
              <li>3. Je propose des solutions respectueuses de tous</li>
              <li>4. Vous discutez ensemble avec mon aide</li>
            </ol>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}