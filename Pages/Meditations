import React, { useState, useEffect } from "react";
import { Conversation } from "@/entities/all";
import { User } from "@/entities/User";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Heart, Users, Plus, Search, Calendar } from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { format } from "date-fns";

import MediationCard from "../components/mediation/MediationCard";
import JoinMediationDialog from "../components/mediation/JoinMediationDialog";

export default function MediationsPage() {
  const [mediations, setMediations] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [showJoinDialog, setShowJoinDialog] = useState(false);
  const [user, setUser] = useState(null);

  useEffect(() => {
    loadMediations();
  }, []);

  const loadMediations = async () => {
    setIsLoading(true);
    try {
      const currentUser = await User.me();
      setUser(currentUser);

      const userMediations = await Conversation.filter({
        participants: currentUser.email
      }, "-created_date");

      const filteredMediations = userMediations.filter(conv => 
        conv.type === "group_mediation" || conv.type === "private_mediation"
      );

      setMediations(filteredMediations);
    } catch (error) {
      console.error("Erreur chargement médiations:", error);
    }
    setIsLoading(false);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "waiting_participants":
        return "bg-yellow-100 text-yellow-800";
      case "analysis":
        return "bg-blue-100 text-blue-800";
      case "group_discussion":
        return "bg-purple-100 text-purple-800";
      case "resolved":
        return "bg-green-100 text-green-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case "waiting_participants":
        return "En attente";
      case "analysis":
        return "En analyse";
      case "group_discussion":
        return "Discussion";
      case "resolved":
        return "Résolue";
      default:
        return "Active";
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen p-6" style={{ backgroundColor: 'var(--background)' }}>
        <div className="max-w-4xl mx-auto">
          <div className="animate-pulse space-y-4">
            <div className="h-8 rounded w-1/3" style={{ backgroundColor: 'var(--muted)' }}></div>
            <div className="h-32 rounded" style={{ backgroundColor: 'var(--muted)' }}></div>
            <div className="h-32 rounded" style={{ backgroundColor: 'var(--muted)' }}></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen p-6" style={{ backgroundColor: 'var(--background)' }}>
      <div className="max-w-4xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-3xl font-bold mb-2" style={{ color: 'var(--foreground)' }}>
              Mes médiations
            </h1>
            <p style={{ color: 'var(--muted-foreground)' }}>
              Gérez vos conflits en cours et résolus
            </p>
          </div>
          
          <div className="flex gap-3 w-full md:w-auto">
            <Button
              variant="outline"
              onClick={() => setShowJoinDialog(true)}
              className="flex-1 md:flex-none"
            >
              <Search className="w-4 h-4 mr-2" />
              Rejoindre
            </Button>
            
            <Link to={createPageUrl("CreateMediation")} className="flex-1 md:flex-none">
              <Button 
                className="w-full"
                style={{
                  backgroundColor: 'var(--primary)',
                  color: 'var(--primary-foreground)'
                }}
              >
                <Plus className="w-4 h-4 mr-2" />
                Nouvelle médiation
              </Button>
            </Link>
          </div>
        </div>

        {mediations.length === 0 ? (
          <Card className="text-center py-12">
            <CardContent>
              <div className="w-16 h-16 mx-auto mb-4 rounded-full bg-gradient-to-r from-gray-100 to-gray-200 flex items-center justify-center">
                <Heart className="w-8 h-8" style={{ color: 'var(--muted-foreground)' }} />
              </div>
              <h3 className="text-xl font-semibold mb-2" style={{ color: 'var(--foreground)' }}>
                Aucune médiation pour le moment
              </h3>
              <p className="mb-6" style={{ color: 'var(--muted-foreground)' }}>
                Créez votre première médiation pour résoudre un conflit avec bienveillance.
              </p>
              <div className="flex flex-col sm:flex-row gap-3 justify-center">
                <Link to={createPageUrl("CreateMediation")}>
                  <Button style={{
                    backgroundColor: 'var(--primary)',
                    color: 'var(--primary-foreground)'
                  }}>
                    <Plus className="w-4 h-4 mr-2" />
                    Créer une médiation
                  </Button>
                </Link>
                <Button
                  variant="outline"
                  onClick={() => setShowJoinDialog(true)}
                >
                  <Search className="w-4 h-4 mr-2" />
                  Rejoindre avec un code
                </Button>
              </div>
            </CardContent>
          </Card>
        ) : (
          <div className="space-y-4">
            {mediations.map((mediation) => (
              <MediationCard 
                key={mediation.id} 
                mediation={mediation}
                currentUser={user}
                onUpdate={loadMediations}
              />
            ))}
          </div>
        )}

        <JoinMediationDialog 
          open={showJoinDialog}
          onOpenChange={setShowJoinDialog}
          onJoined={loadMediations}
        />
      </div>
    </div>
  );
}